#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
"""

import requests
import json
import logging

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

def load_config():
    with open('migration_config.json', 'r') as f:
        return json.load(f)

def test_user_detection():
    config = load_config()

    base_url = config['youtrack']['url'].rstrip('/')
    token = config['youtrack']['token']

    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json',
        'Accept': 'application/json'
    }

    yandex_headers = {
        'Authorization': f"OAuth {config['yandex_tracker']['token']}",
        'X-Cloud-Org-Id': config['yandex_tracker']['org_id'],
        'Content-Type': 'application/json'
    }

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Yandex
    response = requests.get(
        'https://api.tracker.yandex.net/v2/users?page=1&perPage=3',
        headers=yandex_headers
    )

    yandex_users = response.json()

    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API –û–¢–í–ï–¢–û–í")
    print("=" * 50)

    for i, user in enumerate(yandex_users, 1):
        login = user.get('login')
        print(f"\n{i}. üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {login}")

        # –¢–µ—Å—Ç 1: –ß—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ã—á–Ω—ã–π API
        try:
            response = requests.get(
                f"{base_url}/api/users",
                headers=headers,
                params={'query': login, 'fields': 'id,login', '$top': 10}
            )

            print(f"   üìã API users: {response.status_code}")
            if response.status_code == 200:
                api_data = response.json()
                print(f"   üìÑ –¢–∏–ø –æ—Ç–≤–µ—Ç–∞ API: {type(api_data)}")
                print(f"   üìä –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(api_data) if isinstance(api_data, list) else '–Ω–µ —Å–ø–∏—Å–æ–∫'}")

                if isinstance(api_data, list):
                    found = any(u.get('login') == login for u in api_data if isinstance(u, dict))
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ API: {found}")
                    if found:
                        for u in api_data:
                            if isinstance(u, dict) and u.get('login') == login:
                                print(f"   üÜî ID: {u.get('id')}")
                else:
                    print(f"   üìù –û—Ç–≤–µ—Ç: {str(api_data)[:200]}...")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ API: {e}")

        # –¢–µ—Å—Ç 2: –ß—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Hub API
        try:
            response = requests.get(
                f"{base_url}/hub/api/rest/users",
                headers=headers,
                params={'query': login, 'fields': 'id,login', '$top': 10}
            )

            print(f"   üè¢ Hub API: {response.status_code}")
            if response.status_code == 200:
                hub_data = response.json()
                print(f"   üìÑ –¢–∏–ø –æ—Ç–≤–µ—Ç–∞ Hub: {type(hub_data)}")
                print(f"   üìä –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(hub_data) if isinstance(hub_data, (list, dict)) else '–Ω–µ –∫–æ–ª–ª–µ–∫—Ü–∏—è'}")

                if isinstance(hub_data, list):
                    found = any(u.get('login') == login for u in hub_data if isinstance(u, dict))
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ Hub: {found}")
                elif isinstance(hub_data, dict):
                    print(f"   üìù Hub –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ —Å–ø–∏—Å–æ–∫")
                    print(f"   üîë –ö–ª—é—á–∏: {list(hub_data.keys())}")
                else:
                    print(f"   üìù –û—Ç–≤–µ—Ç Hub: {str(hub_data)[:200]}...")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ Hub: {e}")

        # –¢–µ—Å—Ç 3: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–æ–º
        print(f"   üî® –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {login}...")

        yt_user = {
            'login': login,
            'name': user.get('display', login),
            'isActive': True
        }

        if user.get('email'):
            yt_user['email'] = user.get('email')

        print(f"   üì¶ –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è: {json.dumps(yt_user, ensure_ascii=False)}")

        try:
            response = requests.post(
                f"{base_url}/hub/api/rest/users",
                headers=headers,
                json=yt_user,
                params={'fields': 'id,login,name'}
            )

            print(f"   üìä –°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è: {response.status_code}")
            print(f"   üìÑ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
            print(f"   üìù –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")

            if response.status_code in [200, 201]:
                created = response.json()
                print(f"   ‚úÖ –°–û–ó–î–ê–ù! ID: {created.get('id')}")
            elif response.status_code == 409:
                print(f"   ‚ö†Ô∏è –£–ñ–ï –°–£–©–ï–°–¢–í–£–ï–¢")
            else:
                print(f"   ‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø")
        except Exception as e:
            print(f"   üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏: {e}")

        print(f"   " + "-" * 40)

if __name__ == "__main__":
    test_user_detection()