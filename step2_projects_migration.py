#!/usr/bin/env python3
"""
–≠—Ç–∞–ø 2: –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ Yandex Tracker –≤ YouTrack
–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞–ø–ø–∏–Ω–≥
"""

import requests
import json
import time
import logging
from typing import Dict, List, Optional
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('step2_projects.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class YandexTrackerClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Yandex Tracker API"""

    def __init__(self, token: str, org_id: str, is_cloud_org: bool = False):
        self.token = token
        self.org_id = org_id
        self.base_url = "https://api.tracker.yandex.net/v2"
        self.session = requests.Session()
        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        org_header = 'X-Cloud-Org-Id' if is_cloud_org else 'X-Org-ID'
        self.session.headers.update({
            'Authorization': f'OAuth {token}',
            org_header: org_id,
            'Content-Type': 'application/json'
        })

    def get_queues(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π"""
        try:
            response = self.session.get(f"{self.base_url}/queues")
            response.raise_for_status()
            queues = response.json()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(queues)} –æ—á–µ—Ä–µ–¥–µ–π –∏–∑ Yandex Tracker")
            return queues
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π: {e}")
            return []

    def get_queue_statuses(self, queue_key: str) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            response = self.session.get(f"{self.base_url}/queues/{queue_key}/statuses")
            response.raise_for_status()
            statuses = response.json()
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(statuses)} —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {queue_key}")
            return statuses
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {queue_key}: {e}")
            return []

class YouTrackClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å YouTrack API"""

    def __init__(self, base_url: str, token: str):
        self.base_url = base_url.rstrip('/')
        self.token = token
        self.session = requests.Session()
        self.session.headers.update({
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        })

    def create_project(self, project_data: Dict, leader_id: str) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ YouTrack"""
        try:
            yt_project = {
                'name': project_data.get('name'),
                'shortName': project_data.get('key'),
                'description': project_data.get('description', ''),
                'leader': {'id': leader_id}
            }

            response = self.session.post(
                f"{self.base_url}/api/admin/projects",
                json=yt_project,
                params={'fields': 'id,shortName,name'}
            )

            if response.status_code in [200, 201]:
                created_project = response.json()
                logger.info(f"‚úì –°–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç: {created_project.get('shortName')} - {created_project.get('name')}")
                return created_project.get('id')
            elif response.status_code == 409:
                logger.warning(f"‚ö† –ü—Ä–æ–µ–∫—Ç {yt_project['shortName']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return self.get_project_by_shortname(yt_project['shortName'])
            else:
                logger.error(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ {yt_project['shortName']}: {response.status_code} - {response.text}")
                return None

        except requests.RequestException as e:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            return None

    def get_project_by_shortname(self, shortname: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É –∏–º–µ–Ω–∏"""
        try:
            response = self.session.get(
                f"{self.base_url}/api/admin/projects",
                params={
                    'query': shortname,
                    'fields': 'id,shortName'
                }
            )
            response.raise_for_status()
            projects = response.json()

            for project in projects:
                if project.get('shortName') == shortname:
                    return project.get('id')

            return None

        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ {shortname}: {e}")
            return None

    def create_project_statuses(self, project_id: str, statuses: List[Dict]) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –ø—Ä–æ–µ–∫—Ç–∞
            response = self.session.get(
                f"{self.base_url}/api/admin/projects/{project_id}/statuses",
                params={'fields': 'id,name'}
            )

            if response.status_code != 200:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –ø—Ä–æ–µ–∫—Ç–∞ {project_id}")
                return False

            existing_statuses = {status['name']: status['id'] for status in response.json()}

            # –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã
            created_count = 0
            for status in statuses:
                status_name = status.get('name', status.get('key'))
                if status_name not in existing_statuses:
                    status_data = {
                        'name': status_name,
                        'description': status.get('description', ''),
                        'color': status.get('color', '#6B73FF')
                    }

                    create_response = self.session.post(
                        f"{self.base_url}/api/admin/projects/{project_id}/statuses",
                        json=status_data,
                        params={'fields': 'id,name'}
                    )

                    if create_response.status_code == 200:
                        created_count += 1
                        logger.debug(f"  ‚úì –°–æ–∑–¥–∞–Ω —Å—Ç–∞—Ç—É—Å: {status_name}")
                    else:
                        logger.warning(f"  ‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç—É—Å {status_name}: {create_response.status_code}")

            logger.info(f"  üìã –°–æ–∑–¥–∞–Ω–æ {created_count} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞")
            return True

        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤: {e}")
            return False

def load_config() -> Dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        with open('migration_config.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        logger.error("–§–∞–π–ª migration_config.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        exit(1)

def load_user_mapping() -> Dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        with open('user_mapping.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            return data.get('users', {})
    except FileNotFoundError:
        logger.error("–§–∞–π–ª user_mapping.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        logger.error("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ step1_users_migration.py")
        exit(1)

def save_project_mapping(project_mapping: Dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    mapping_data = {
        'projects': project_mapping,
        'timestamp': datetime.now().isoformat(),
        'step': 'projects_completed'
    }

    with open('project_mapping.json', 'w', encoding='utf-8') as f:
        json.dump(mapping_data, f, ensure_ascii=False, indent=2)

    logger.info(f"–ú–∞–ø–ø–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ project_mapping.json")

def load_existing_project_mapping() -> Dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    try:
        with open('project_mapping.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            return data.get('projects', {})
    except FileNotFoundError:
        return {}

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç—Ç–∞–ø–∞ 2"""
    logger.info("=" * 50)
    logger.info("–≠–¢–ê–ü 2: –ú–ò–ì–†–ê–¶–ò–Ø –ü–†–û–ï–ö–¢–û–í")
    logger.info("=" * 50)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_mapping = load_user_mapping()
    if not user_mapping:
        logger.error("–ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
        logger.error("–°–Ω–∞—á–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç–µ step1_users_migration.py")
        exit(1)

    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_mapping)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
    is_cloud_org = config['yandex_tracker'].get('is_cloud_org', False)
    
    yandex_client = YandexTrackerClient(
        config['yandex_tracker']['token'],
        config['yandex_tracker']['org_id'],
        is_cloud_org
    )

    youtrack_client = YouTrackClient(
        config['youtrack']['url'],
        config['youtrack']['token']
    )

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞–ø–ø–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–æ–≤
    project_mapping = load_existing_project_mapping()
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞–ø–ø–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(project_mapping)} –ø—Ä–æ–µ–∫—Ç–æ–≤")

    # –ü–æ–ª—É—á–∞–µ–º –æ—á–µ—Ä–µ–¥–∏ –∏–∑ Yandex Tracker
    yandex_queues = yandex_client.get_queues()
    if not yandex_queues:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—á–µ—Ä–µ–¥–∏ –∏–∑ Yandex Tracker")
        exit(1)

    # –í—ã–±–∏—Ä–∞–µ–º –ª–∏–¥–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    default_leader_id = next(iter(user_mapping.values())) if user_mapping else None
    if not default_leader_id:
        logger.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞")
        exit(1)

    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é {len(yandex_queues)} –ø—Ä–æ–µ–∫—Ç–æ–≤...")

    # –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã
    success_count = 0
    skip_count = 0
    error_count = 0

    for i, queue in enumerate(yandex_queues, 1):
        queue_key = queue.get('key')
        queue_name = queue.get('name', queue_key)

        logger.info(f"[{i}/{len(yandex_queues)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç: {queue_key} - {queue_name}")

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω
        if queue_key in project_mapping:
            logger.info(f"‚è≠ –ü—Ä–æ–µ–∫—Ç {queue_key} —É–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            skip_count += 1
            continue

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
        project_id = youtrack_client.create_project(queue, default_leader_id)
        if project_id:
            project_mapping[queue_key] = project_id
            success_count += 1

            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
            logger.info(f"  üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {queue_key}")
            statuses = yandex_client.get_queue_statuses(queue_key)
            if statuses:
                youtrack_client.create_project_statuses(project_id, statuses)
            else:
                logger.warning(f"  ‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {queue_key}")
        else:
            error_count += 1

        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        time.sleep(1.0)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∂–¥—ã–µ 5 –ø—Ä–æ–µ–∫—Ç–æ–≤
        if i % 5 == 0:
            save_project_mapping(project_mapping)
            logger.info(f"–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {i} –ø—Ä–æ–µ–∫—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    save_project_mapping(project_mapping)

    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    logger.info("=" * 50)
    logger.info("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –≠–¢–ê–ü–ê 2:")
    logger.info(f"‚úì –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {success_count}")
    logger.info(f"‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç): {skip_count}")
    logger.info(f"‚úó –û—à–∏–±–æ–∫: {error_count}")
    logger.info(f"üìä –í—Å–µ–≥–æ –≤ –º–∞–ø–ø–∏–Ω–≥–µ: {len(project_mapping)}")
    logger.info("=" * 50)

    if error_count == 0:
        logger.info("üéâ –≠–¢–ê–ü 2 –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        logger.info("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å step3_issues_migration.py")
    else:
        logger.warning(f"‚ö† –≠—Ç–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω —Å {error_count} –æ—à–∏–±–∫–∞–º–∏")
        logger.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—É—Å–∫ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫")

if __name__ == "__main__":
    main()