#!/usr/bin/env python3
"""
–ú–∞—Å—Ç–µ—Ä-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ Yandex Tracker –≤ YouTrack
–£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏
"""

import subprocess
import sys
import json
import logging
from datetime import datetime
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('migration_master.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

MIGRATION_STEPS = [
    {
        'name': '–ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        'script': 'step1_users_migration.py',
        'description': '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ YouTrack',
        'output_file': 'user_mapping.json'
    },
    {
        'name': '–ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤',
        'script': 'step2_projects_migration.py',
        'description': '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏',
        'output_file': 'project_mapping.json'
    },
    {
        'name': '–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á',
        'script': 'step3_issues_migration.py',
        'description': '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏',
        'output_file': 'issue_mapping.json'
    },
    {
        'name': '–ú–∏–≥—Ä–∞—Ü–∏—è —Å–≤—è–∑–µ–π',
        'script': 'step4_links_migration.py',
        'description': '–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏',
        'output_file': 'links_report.json'
    }
]

def check_prerequisites():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not Path('migration_config.json').exists():
        logger.error("‚ùå –§–∞–π–ª migration_config.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        logger.info("üìù –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        with open('migration_config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)

        required_fields = [
            'yandex_tracker.token',
            'yandex_tracker.org_id',
            'youtrack.url',
            'youtrack.token'
        ]

        for field in required_fields:
            keys = field.split('.')
            value = config
            for key in keys:
                value = value.get(key, '')

            if not value or value.startswith('YOUR_'):
                logger.error(f"‚ùå –ü–æ–ª–µ {field} –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return False

    except json.JSONDecodeError:
        logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ —ç—Ç–∞–ø–æ–≤
    for step in MIGRATION_STEPS:
        if not Path(step['script']).exists():
            logger.error(f"‚ùå –°–∫—Ä–∏–ø—Ç {step['script']} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

    logger.info("‚úÖ –í—Å–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    return True

def run_step(step_info, resume=False):
    """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    script_name = step_info['script']
    step_name = step_info['name']
    output_file = step_info['output_file']

    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞: {step_name}")
    logger.info(f"üìÑ –°–∫—Ä–∏–ø—Ç: {script_name}")
    logger.info(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {step_info['description']}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–∞–ø (–µ—Å–ª–∏ resume=True)
    if resume and Path(output_file).exists():
        logger.info(f"‚è≠Ô∏è –≠—Ç–∞–ø —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω (–Ω–∞–π–¥–µ–Ω {output_file}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return True

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
        start_time = datetime.now()
        result = subprocess.run([sys.executable, script_name],
                                capture_output=True, text=True, encoding='utf-8')
        end_time = datetime.now()
        duration = end_time - start_time

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result.returncode == 0:
            logger.info(f"‚úÖ –≠—Ç–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {duration}")
            logger.info(f"üìä –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {output_file}")
            return True
        else:
            logger.error(f"‚ùå –≠—Ç–∞–ø –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ {result.returncode})")
            logger.error(f"‚ùå Stderr: {result.stderr}")
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ {script_name}: {e}")
        return False

def run_full_migration(resume=False):
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏"""
    logger.info("=" * 60)
    logger.info("üéØ –ù–ê–ß–ê–õ–û –ü–û–õ–ù–û–ô –ú–ò–ì–†–ê–¶–ò–ò YANDEX TRACKER ‚Üí YOUTRACK")
    logger.info("=" * 60)

    start_time = datetime.now()
    failed_steps = []

    for i, step in enumerate(MIGRATION_STEPS, 1):
        logger.info(f"\nüìç –≠–¢–ê–ü {i}/{len(MIGRATION_STEPS)}: {step['name'].upper()}")
        logger.info("-" * 50)

        success = run_step(step, resume)

        if not success:
            failed_steps.append(step['name'])
            logger.error(f"üõë –≠—Ç–∞–ø {step['name']} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–Ω–æ")

            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ª–∏ –¥–∞–ª—å—à–µ
            print(f"\n‚ùì –≠—Ç–∞–ø '{step['name']}' –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π.")
            print("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–æ–≤? (y/n): ", end='')
            choice = input().lower()

            if choice != 'y':
                logger.info("üõë –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
        else:
            logger.info(f"‚úÖ –≠—Ç–∞–ø {step['name']} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

    end_time = datetime.now()
    total_duration = end_time - start_time

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    logger.info("\n" + "=" * 60)
    logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ú–ò–ì–†–ê–¶–ò–ò")
    logger.info("=" * 60)
    logger.info(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_duration}")
    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤: {len(MIGRATION_STEPS) - len(failed_steps)}")
    logger.info(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤: {len(failed_steps)}")

    if failed_steps:
        logger.warning("‚ö†Ô∏è –≠—Ç–∞–ø—ã —Å –æ—à–∏–±–∫–∞–º–∏:")
        for step in failed_steps:
            logger.warning(f"  - {step}")

    if not failed_steps:
        logger.info("üéâ –í–°–Ø –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        logger.info("\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        logger.info("1. üîç –ó–∞–ø—É—Å—Ç–∏—Ç–µ validation.py –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        logger.info("2. üë• –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        logger.info("3. üéì –û–±—É—á–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ä–∞–±–æ—Ç–µ —Å YouTrack")
        logger.info("4. üìß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    else:
        logger.warning("‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
        logger.info("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —ç—Ç–∞–ø—ã")

def run_specific_step(step_number):
    """–ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç—Ç–∞–ø–∞"""
    if step_number < 1 or step_number > len(MIGRATION_STEPS):
        logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —ç—Ç–∞–ø–∞: {step_number}")
        logger.info(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç—Ç–∞–ø—ã: 1-{len(MIGRATION_STEPS)}")
        return False

    step = MIGRATION_STEPS[step_number - 1]
    logger.info(f"üéØ –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞ {step_number}: {step['name']}")

    return run_step(step)

def show_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏"""
    logger.info("üìä –°–¢–ê–¢–£–° –ú–ò–ì–†–ê–¶–ò–ò")
    logger.info("-" * 40)

    for i, step in enumerate(MIGRATION_STEPS, 1):
        output_file = step['output_file']
        if Path(output_file).exists():
            # –ß–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–∞
            try:
                with open(output_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)

                if 'users' in data:
                    count = len(data['users'])
                    status = f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω ({count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"
                elif 'projects' in data:
                    count = len(data['projects'])
                    status = f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω ({count} –ø—Ä–æ–µ–∫—Ç–æ–≤)"
                elif 'issues' in data:
                    count = len(data['issues'])
                    status = f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω ({count} –∑–∞–¥–∞—á)"
                elif 'links_statistics' in data:
                    count = data['links_statistics'].get('links_created', 0)
                    status = f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω ({count} —Å–≤—è–∑–µ–π)"
                else:
                    status = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω"
            except:
                status = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω"
        else:
            status = "‚è∏Ô∏è –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω"

        logger.info(f"{i}. {step['name']}: {status}")

def create_example_config():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    config = {
        "yandex_tracker": {
            "token": "YOUR_YANDEX_TRACKER_TOKEN",
            "org_id": "YOUR_YANDEX_ORG_ID"
        },
        "youtrack": {
            "url": "https://your-company.myjetbrains.com",
            "token": "YOUR_YOUTRACK_TOKEN"
        },
        "migration_options": {
            "migrate_comments": True,
            "batch_size": 50,
            "rate_limit_delay": 0.5
        }
    }

    with open('migration_config.json', 'w', encoding='utf-8') as f:
        json.dump(config, f, ensure_ascii=False, indent=2)

    logger.info("üìù –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ migration_config.json")
    logger.info("‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª, –∑–∞–ø–æ–ª–Ω–∏–≤ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse

    parser = argparse.ArgumentParser(description='–ú–∞—Å—Ç–µ—Ä-—Å–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ Yandex Tracker ‚Üí YouTrack')
    parser.add_argument('--step', type=int, help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —ç—Ç–∞–ø (1-4)')
    parser.add_argument('--resume', action='store_true', help='–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é (–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã)')
    parser.add_argument('--status', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏')
    parser.add_argument('--create-config', action='store_true', help='–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')

    args = parser.parse_args()

    # –õ–æ–≥–æ—Ç–∏–ø
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë              –ú–ò–ì–†–ê–¶–ò–Ø YANDEX TRACKER ‚Üí YOUTRACK              ‚ïë
‚ïë                        –í–µ—Ä—Å–∏—è 2.0                           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)

    if args.create_config:
        create_example_config()
        return

    if args.status:
        show_status()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    if not check_prerequisites():
        logger.error("üí• –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        logger.info("üîß –£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ")
        sys.exit(1)

    try:
        if args.step:
            # –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç—Ç–∞–ø–∞
            success = run_specific_step(args.step)
            sys.exit(0 if success else 1)
        else:
            # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
            run_full_migration(resume=args.resume)

    except KeyboardInterrupt:
        logger.info("\nüõë –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        logger.info("üîÑ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --resume")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()