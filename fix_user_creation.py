#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å email –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
"""

def create_email_user_method():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return '''
    def create_user(self, user_data: Dict) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ YouTrack —Å email –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            login = user_data.get('login', user_data.get('id'))
            email = user_data.get('email')
            display_name = user_data.get('display', login)
            
            if not email:
                logger.warning(f"‚ö† –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {login} –Ω–µ—Ç email, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return None
            
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Hub API
            hub_url = f"{self.base_url}/hub/api/rest/users"
            
            hub_user = {
                'login': login,
                'name': display_name,
                'email': email,
                'isActive': True
            }
            
            response = self.session.post(
                hub_url,
                json=hub_user,
                params={'fields': 'id,login,name,email'}
            )
            
            if response.status_code in [200, 201]:
                created_user = response.json()
                user_id = created_user.get('id')
                logger.info(f"‚úì –°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {login}")
                
                # –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º email –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
                self._add_email_authentication(user_id, email, login)
                
                return user_id
                
            elif response.status_code == 409:
                logger.warning(f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {login} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return self.get_user_by_login(login)
            else:
                logger.error(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {login}: {response.status_code} - {response.text}")
                return None
                
        except requests.RequestException as e:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
    
    def _add_email_authentication(self, user_id: str, email: str, login: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ email –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
            temp_password = f"TempPass123_{login[-4:]}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º email credential —á–µ—Ä–µ–∑ Hub API
            credentials_url = f"{self.base_url}/hub/api/rest/users/{user_id}/credentials"
            
            credential_data = {
                'email': email,
                'password': temp_password,
                'changeOnLogin': True  # –ó–∞—Å—Ç–∞–≤–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
            }
            
            response = self.session.post(credentials_url, json=credential_data)
            
            if response.status_code in [200, 201]:
                logger.info(f"  üìß Email –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è {login}")
                logger.info(f"  üîë –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: {temp_password}")
            else:
                logger.warning(f"  ‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å email –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é: {response.status_code}")
                
        except Exception as e:
            logger.warning(f"  ‚ö† –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è email –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
    '''

# –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª step1_users_migration.py
with open('step1_users_migration.py', 'r', encoding='utf-8') as f:
    content = f.read()

# –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ create_user
import re

# –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –∏ –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ
old_method_pattern = r'def create_user\(self, user_data: Dict\) -> Optional\[str\]:.*?(?=def|\Z)'
new_method = create_email_user_method()

content = re.sub(old_method_pattern, new_method, content, flags=re.DOTALL)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
with open('step1_users_migration.py', 'w', encoding='utf-8') as f:
    f.write(content)

print("‚úÖ –ú–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω")
print("üìß –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è —Å email –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π")
print("üîë –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ª–æ–≥")