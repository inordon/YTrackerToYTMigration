#!/usr/bin/env python3
"""
–≠—Ç–∞–ø 4: –ú–∏–≥—Ä–∞—Ü–∏—è —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏ –∏–∑ Yandex Tracker –≤ YouTrack
–°–æ–∑–¥–∞–µ—Ç —Å–≤—è–∑–∏ –º–µ–∂–¥—É –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
"""

import requests
import json
import time
import logging
from typing import Dict, List, Optional
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('step4_links.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class YandexTrackerClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Yandex Tracker API"""

    def __init__(self, token: str, org_id: str):
        self.token = token
        self.org_id = org_id
        self.base_url = "https://api.tracker.yandex.net/v2"
        self.session = requests.Session()
        self.session.headers.update({
            'Authorization': f'OAuth {token}',
            'X-Org-ID': org_id,
            'Content-Type': 'application/json'
        })

    def get_issue_links(self, issue_key: str) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –∑–∞–¥–∞—á–∏"""
        try:
            response = self.session.get(f"{self.base_url}/issues/{issue_key}/links")
            response.raise_for_status()
            links = response.json()
            logger.debug(f"    üîó –ü–æ–ª—É—á–µ–Ω–æ {len(links)} —Å–≤—è–∑–µ–π –¥–ª—è –∑–∞–¥–∞—á–∏ {issue_key}")
            return links
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–µ–π –¥–ª—è –∑–∞–¥–∞—á–∏ {issue_key}: {e}")
            return []

class YouTrackClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å YouTrack API"""

    def __init__(self, base_url: str, token: str):
        self.base_url = base_url.rstrip('/')
        self.token = token
        self.session = requests.Session()
        self.session.headers.update({
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        })

    def get_link_types(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–≤—è–∑–µ–π"""
        try:
            response = self.session.get(
                f"{self.base_url}/api/admin/issueLinkTypes",
                params={'fields': 'name,inward,outward'}
            )
            response.raise_for_status()
            link_types = response.json()

            # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ —Å–≤—è–∑–µ–π
            type_mapping = {}
            for link_type in link_types:
                name = link_type.get('name', '')
                inward = link_type.get('inward', '')
                outward = link_type.get('outward', '')

                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–∏–ø—ã —Å–≤—è–∑–µ–π
                if 'depend' in name.lower() or '–±–ª–æ–∫–∏—Ä' in name.lower():
                    type_mapping['depends'] = name
                elif 'duplicate' in name.lower() or '–¥—É–±–ª–∏–∫–∞—Ç' in name.lower():
                    type_mapping['duplicates'] = name
                elif 'relate' in name.lower() or '—Å–≤—è–∑' in name.lower():
                    type_mapping['relates'] = name
                elif 'parent' in name.lower() or '—Ä–æ–¥–∏—Ç–µ–ª' in name.lower():
                    type_mapping['parent'] = name

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ç–∏–ø —Å–≤—è–∑–∏
            if not type_mapping:
                type_mapping['relates'] = 'relates'

            logger.info(f"  üîó –ù–∞–π–¥–µ–Ω–æ —Ç–∏–ø–æ–≤ —Å–≤—è–∑–µ–π: {len(type_mapping)}")
            return type_mapping

        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —Å–≤—è–∑–µ–π: {e}")
            return {'relates': 'relates'}

    def create_issue_link(self, issue_id: str, target_issue_id: str, link_type: str = 'relates') -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏"""
        try:
            link_request = {
                'linkType': link_type,
                'issues': [{'id': target_issue_id}]
            }

            response = self.session.post(
                f"{self.base_url}/api/issues/{issue_id}/links",
                json=link_request,
                params={'fields': 'id'}
            )

            if response.status_code == 200:
                logger.debug(f"      ‚úì –°–æ–∑–¥–∞–Ω–∞ —Å–≤—è–∑—å {link_type}")
                return True
            else:
                logger.warning(f"      ‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–≤—è–∑—å: {response.status_code}")
                return False

        except requests.RequestException as e:
            logger.error(f"      ‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏: {e}")
            return False

def load_config() -> Dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        with open('migration_config.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        logger.error("–§–∞–π–ª migration_config.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        exit(1)

def load_issue_mapping() -> Dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞ –∑–∞–¥–∞—á"""
    try:
        with open('issue_mapping.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            return data.get('issues', {})
    except FileNotFoundError:
        logger.error("–§–∞–π–ª issue_mapping.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        logger.error("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ step3_issues_migration.py")
        exit(1)

def save_links_report(links_stats: Dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Å–≤—è–∑—è—Ö"""
    report_data = {
        'links_statistics': links_stats,
        'timestamp': datetime.now().isoformat(),
        'step': 'links_completed'
    }

    with open('links_report.json', 'w', encoding='utf-8') as f:
        json.dump(report_data, f, ensure_ascii=False, indent=2)

    logger.info(f"–û—Ç—á–µ—Ç –æ —Å–≤—è–∑—è—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ links_report.json")

def map_link_type(yandex_link_type: str, youtrack_link_types: Dict[str, str]) -> str:
    """–ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ —Å–≤—è–∑–µ–π –∏–∑ Yandex Tracker –≤ YouTrack"""
    yandex_type = yandex_link_type.lower()

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏
    if 'depend' in yandex_type or '–±–ª–æ–∫–∏—Ä' in yandex_type:
        return youtrack_link_types.get('depends', 'relates')
    elif 'duplicate' in yandex_type or '–¥—É–±–ª–∏–∫–∞—Ç' in yandex_type:
        return youtrack_link_types.get('duplicates', 'relates')
    elif 'parent' in yandex_type or '—Ä–æ–¥–∏—Ç–µ–ª' in yandex_type:
        return youtrack_link_types.get('parent', 'relates')
    else:
        return youtrack_link_types.get('relates', 'relates')

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç—Ç–∞–ø–∞ 4"""
    logger.info("=" * 50)
    logger.info("–≠–¢–ê–ü 4: –ú–ò–ì–†–ê–¶–ò–Ø –°–í–Ø–ó–ï–ô")
    logger.info("=" * 50)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –∑–∞–¥–∞—á
    issue_mapping = load_issue_mapping()
    if not issue_mapping:
        logger.error("–ú–∞–ø–ø–∏–Ω–≥ –∑–∞–¥–∞—á –ø—É—Å—Ç")
        logger.error("–°–Ω–∞—á–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç–µ step3_issues_migration.py")
        exit(1)

    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –∑–∞–¥–∞—á: {len(issue_mapping)} –∑–∞–¥–∞—á")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
    yandex_client = YandexTrackerClient(
        config['yandex_tracker']['token'],
        config['yandex_tracker']['org_id']
    )

    youtrack_client = YouTrackClient(
        config['youtrack']['url'],
        config['youtrack']['token']
    )

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã —Å–≤—è–∑–µ–π YouTrack
    youtrack_link_types = youtrack_client.get_link_types()
    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Å–≤—è–∑–µ–π: {list(youtrack_link_types.keys())}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    links_stats = {
        'total_issues_checked': 0,
        'total_links_found': 0,
        'links_created': 0,
        'links_skipped': 0,
        'links_failed': 0,
        'link_types_used': {}
    }

    # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π
    created_links = set()

    logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π...")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏
    issue_list = list(issue_mapping.items())

    for i, (yandex_issue_key, youtrack_issue_id) in enumerate(issue_list, 1):
        if i % 100 == 0:
            logger.info(f"[{i}/{len(issue_list)}] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á")

        links_stats['total_issues_checked'] += 1

        # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∏ –∑–∞–¥–∞—á–∏ –∏–∑ Yandex Tracker
        yandex_links = yandex_client.get_issue_links(yandex_issue_key)
        if not yandex_links:
            continue

        links_stats['total_links_found'] += len(yandex_links)
        logger.debug(f"  üîç –ó–∞–¥–∞—á–∞ {yandex_issue_key}: –Ω–∞–π–¥–µ–Ω–æ {len(yandex_links)} —Å–≤—è–∑–µ–π")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å–≤—è–∑—å
        for link in yandex_links:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —Å–≤—è–∑–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
            target_issue_key = None
            if link.get('object'):
                target_issue_key = link['object'].get('key')
            elif link.get('target'):
                target_issue_key = link['target'].get('key')

            if not target_issue_key:
                logger.debug(f"    ‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª–µ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è —Å–≤—è–∑–∏")
                links_stats['links_skipped'] += 1
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª–µ–≤–∞—è –∑–∞–¥–∞—á–∞ —Ç–æ–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞
            target_youtrack_id = issue_mapping.get(target_issue_key)
            if not target_youtrack_id:
                logger.debug(f"    ‚ö† –¶–µ–ª–µ–≤–∞—è –∑–∞–¥–∞—á–∞ {target_issue_key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–∞–ø–ø–∏–Ω–≥–µ")
                links_stats['links_skipped'] += 1
                continue

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–≤—è–∑–∏
            yandex_link_type = link.get('type', {}).get('key', 'relates')
            youtrack_link_type = map_link_type(yandex_link_type, youtrack_link_types)

            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–≤—è–∑–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–µ–π
            link_signature = f"{youtrack_issue_id}-{target_youtrack_id}-{youtrack_link_type}"
            reverse_link_signature = f"{target_youtrack_id}-{youtrack_issue_id}-{youtrack_link_type}"

            if link_signature in created_links or reverse_link_signature in created_links:
                logger.debug(f"    ‚è≠ –°–≤—è–∑—å —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞")
                links_stats['links_skipped'] += 1
                continue

            # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å
            if youtrack_client.create_issue_link(youtrack_issue_id, target_youtrack_id, youtrack_link_type):
                created_links.add(link_signature)
                links_stats['links_created'] += 1

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–≤—è–∑–µ–π
                if youtrack_link_type not in links_stats['link_types_used']:
                    links_stats['link_types_used'][youtrack_link_type] = 0
                links_stats['link_types_used'][youtrack_link_type] += 1

            else:
                links_stats['links_failed'] += 1

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–∑–¥–µ–Ω–∏–µ–º —Å–≤—è–∑–µ–π
            time.sleep(0.2)

        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
        time.sleep(0.1)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    save_links_report(links_stats)

    # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    logger.info("=" * 50)
    logger.info("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –≠–¢–ê–ü–ê 4:")
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∑–∞–¥–∞—á: {links_stats['total_issues_checked']}")
    logger.info(f"üîó –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–µ–π: {links_stats['total_links_found']}")
    logger.info(f"‚úì –°–æ–∑–¥–∞–Ω–æ —Å–≤—è–∑–µ–π: {links_stats['links_created']}")
    logger.info(f"‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–≤—è–∑–µ–π: {links_stats['links_skipped']}")
    logger.info(f"‚úó –û—à–∏–±–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è: {links_stats['links_failed']}")
    logger.info("")
    logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–≤—è–∑–µ–π:")
    for link_type, count in links_stats['link_types_used'].items():
        logger.info(f"  {link_type}: {count}")
    logger.info("=" * 50)

    if links_stats['links_failed'] == 0:
        logger.info("üéâ –≠–¢–ê–ü 4 –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        logger.info("üéä –í–°–Ø –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        logger.info("")
        logger.info("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:")
        logger.info("1. –ó–∞–ø—É—Å—Ç–∏—Ç—å validation.py –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        logger.info("2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        logger.info("3. –û–±—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Ä–∞–±–æ—Ç–µ —Å YouTrack")
    else:
        logger.warning(f"‚ö† –≠—Ç–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω —Å {links_stats['links_failed']} –æ—à–∏–±–∫–∞–º–∏")
        logger.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã")

if __name__ == "__main__":
    main()