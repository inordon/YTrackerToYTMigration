#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
"""

import requests
import json
import time
import logging
from typing import Dict, List, Optional
from datetime import datetime

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('migrate_statuses.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class YandexTrackerClient:
    def __init__(self, token: str, org_id: str, is_cloud_org: bool = False):
        self.token = token
        self.org_id = org_id
        self.base_url = "https://api.tracker.yandex.net/v2"
        self.session = requests.Session()

        org_header = 'X-Cloud-Org-Id' if is_cloud_org else 'X-Org-ID'
        self.session.headers.update({
            'Authorization': f'OAuth {token}',
            org_header: org_id,
            'Content-Type': 'application/json'
        })

    def get_queue_statuses(self, queue_key: str) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            response = self.session.get(f"{self.base_url}/queues/{queue_key}/statuses")
            response.raise_for_status()
            statuses = response.json()
            logger.info(f"  üìã –ü–æ–ª—É—á–µ–Ω–æ {len(statuses)} —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {queue_key}")
            return statuses
        except requests.RequestException as e:
            logger.warning(f"  ‚ö† –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {queue_key}: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã
            return [
                {'name': 'Open', 'key': 'open', 'color': '#6B73FF'},
                {'name': 'In Progress', 'key': 'inprogress', 'color': '#FFA500'},
                {'name': 'Resolved', 'key': 'resolved', 'color': '#00AA00'},
                {'name': 'Closed', 'key': 'closed', 'color': '#808080'}
            ]

class YouTrackClient:
    def __init__(self, base_url: str, token: str):
        self.base_url = base_url.rstrip('/')
        self.token = token
        self.session = requests.Session()
        self.session.headers.update({
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        })

    def project_has_custom_state_bundle(self, project_id: str, queue_key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É –ø—Ä–æ–µ–∫—Ç–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–π state bundle –¥–ª—è –¥–∞–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏"""
        try:
            response = self.session.get(
                f"{self.base_url}/api/admin/projects/{project_id}/customFields",
                params={'fields': 'field(name),bundle(name)'}
            )

            if response.status_code == 200:
                custom_fields = response.json()
                for field in custom_fields:
                    if field.get('field', {}).get('name') == 'State':
                        bundle_name = field.get('bundle', {}).get('name', '')
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ù–ê–® bundle –¥–ª—è –¥–∞–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏
                        expected_bundle_name = f"{queue_key} States"
                        if bundle_name == expected_bundle_name:
                            logger.debug(f"    ‚úì –ü—Ä–æ–µ–∫—Ç —É–∂–µ –∏–º–µ–µ—Ç –Ω–∞—à state bundle: {bundle_name}")
                            return True
                        elif bundle_name and not bundle_name.startswith('Default'):
                            logger.info(f"    üîÑ –ü—Ä–æ–µ–∫—Ç –∏–º–µ–µ—Ç –¥—Ä—É–≥–æ–π bundle: {bundle_name}, –∑–∞–º–µ–Ω–∏–º –Ω–∞ –Ω–∞—à")
                            return False
                        else:
                            logger.info(f"    üîÑ –ü—Ä–æ–µ–∫—Ç –∏–º–µ–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π bundle: {bundle_name}, –∑–∞–º–µ–Ω–∏–º –Ω–∞ –Ω–∞—à")
                            return False
            return False
        except Exception as e:
            logger.debug(f"    –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ state bundle: {e}")
            return False

    def create_state_bundle(self, bundle_name: str, statuses: List[Dict]) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ state bundle –≤ YouTrack"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è bundle
            bundle_states = []
            for status in statuses:
                state_data = {
                    'name': status.get('name', status.get('key')),
                    'description': status.get('description', ''),
                    'color': {'id': status.get('color', '#6B73FF').replace('#', '')}
                }
                bundle_states.append(state_data)

            bundle_data = {
                'name': bundle_name,
                'states': bundle_states
            }

            response = self.session.post(
                f"{self.base_url}/api/admin/customFieldSettings/bundles/state",
                json=bundle_data,
                params={'fields': 'id,name,states(id,name)'}
            )

            if response.status_code in [200, 201]:
                created_bundle = response.json()
                logger.info(f"    ‚úì –°–æ–∑–¥–∞–Ω state bundle: {bundle_name}")
                return created_bundle.get('id')
            else:
                logger.warning(f"    ‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å bundle {bundle_name}: {response.status_code} - {response.text}")
                return None

        except Exception as e:
            logger.error(f"    ‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è state bundle: {e}")
            return None

    def replace_state_bundle_for_project(self, project_id: str, bundle_id: str) -> bool:
        """–ó–∞–º–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ state bundle –ø—Ä–æ–µ–∫—Ç—É –Ω–∞ –Ω–æ–≤—ã–π"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º State field
            response = self.session.get(
                f"{self.base_url}/api/admin/customFieldSettings/customFields",
                params={'fields': 'id,name,fieldType', '$top': 100}
            )

            state_field_id = None
            if response.status_code == 200:
                fields = response.json()
                for field in fields:
                    if field.get('name') == 'State' and 'state' in field.get('fieldType', '').lower():
                        state_field_id = field.get('id')
                        break

            if not state_field_id:
                logger.warning(f"    ‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ State")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ custom fields –ø—Ä–æ–µ–∫—Ç–∞
            response = self.session.get(
                f"{self.base_url}/api/admin/projects/{project_id}/customFields",
                params={'fields': 'id,field(id,name),bundle(id,name)'}
            )

            project_state_field_id = None
            if response.status_code == 200:
                custom_fields = response.json()
                for field in custom_fields:
                    if field.get('field', {}).get('name') == 'State':
                        project_state_field_id = field.get('id')
                        break

            # –ï—Å–ª–∏ –ø–æ–ª–µ State —É–∂–µ –µ—Å—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ bundle
            if project_state_field_id:
                response = self.session.post(
                    f"{self.base_url}/api/admin/projects/{project_id}/customFields/{project_state_field_id}",
                    json={'bundle': {'id': bundle_id}},
                    params={'fields': 'id,field(name),bundle(name)'}
                )

                if response.status_code == 200:
                    logger.info(f"    ‚úì State bundle –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞")
                    return True
                else:
                    logger.warning(f"    ‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å bundle: {response.status_code}")
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –Ω–æ–≤–æ–µ –ø–æ–ª–µ

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ State —Å –Ω–∞—à–∏–º bundle
            custom_field_data = {
                'field': {'id': state_field_id},
                'bundle': {'id': bundle_id}
            }

            response = self.session.post(
                f"{self.base_url}/api/admin/projects/{project_id}/customFields",
                json=custom_field_data,
                params={'fields': 'id,field(name),bundle(name)'}
            )

            if response.status_code in [200, 201]:
                logger.info(f"    ‚úì State bundle –Ω–∞–∑–Ω–∞—á–µ–Ω –ø—Ä–æ–µ–∫—Ç—É")
                return True
            elif response.status_code == 409:
                logger.info(f"    ‚ö† State bundle —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –ø—Ä–æ–µ–∫—Ç—É")
                return True
            else:
                logger.warning(f"    ‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å bundle: {response.status_code} - {response.text}")
                return False

        except Exception as e:
            logger.error(f"    ‚úó –û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã state bundle: {e}")
            return False

def load_config() -> Dict:
    try:
        with open('migration_config.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        logger.error("–§–∞–π–ª migration_config.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        exit(1)

def load_project_mapping() -> Dict:
    try:
        with open('project_mapping.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            return data.get('projects', {})
    except FileNotFoundError:
        logger.error("–§–∞–π–ª project_mapping.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        exit(1)

def main():
    logger.info("=" * 60)
    logger.info("–ú–ò–ì–†–ê–¶–ò–Ø –°–¢–ê–¢–£–°–û–í –î–õ–Ø –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ü–†–û–ï–ö–¢–û–í")
    logger.info("=" * 60)

    config = load_config()
    project_mapping = load_project_mapping()

    if not project_mapping:
        logger.error("–ú–∞–ø–ø–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø—É—Å—Ç")
        exit(1)

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(project_mapping)} –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
    is_cloud_org = config['yandex_tracker'].get('is_cloud_org', False)

    yandex_client = YandexTrackerClient(
        config['yandex_tracker']['token'],
        config['yandex_tracker']['org_id'],
        is_cloud_org
    )

    youtrack_client = YouTrackClient(
        config['youtrack']['url'],
        config['youtrack']['token']
    )

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç
    success_count = 0
    skip_count = 0
    error_count = 0

    for i, (queue_key, project_id) in enumerate(project_mapping.items(), 1):
        logger.info(f"[{i}/{len(project_mapping)}] üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç: {queue_key}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π state bundle
        if youtrack_client.project_has_custom_state_bundle(project_id, queue_key):
            logger.info(f"  ‚è≠ –ü—Ä–æ–µ–∫—Ç {queue_key} —É–∂–µ –∏–º–µ–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ Yandex Tracker")
            skip_count += 1
            continue

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏–∑ Yandex Tracker
        statuses = yandex_client.get_queue_statuses(queue_key)

        if not statuses:
            logger.warning(f"  ‚ö† –ù–µ—Ç —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {queue_key}")
            error_count += 1
            continue

        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è bundle
        bundle_name = f"{queue_key} States"

        # –°–æ–∑–¥–∞–µ–º state bundle
        bundle_id = youtrack_client.create_state_bundle(bundle_name, statuses)
        if not bundle_id:
            error_count += 1
            continue

        # –ù–∞–∑–Ω–∞—á–∞–µ–º bundle –ø—Ä–æ–µ–∫—Ç—É (–∑–∞–º–µ–Ω—è—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        if youtrack_client.replace_state_bundle_for_project(project_id, bundle_id):
            success_count += 1
            logger.info(f"  üéâ –°—Ç–∞—Ç—É—Å—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {queue_key}")
        else:
            error_count += 1

        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–µ–∫—Ç–∞–º–∏
        time.sleep(2)

    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    logger.info("=" * 60)
    logger.info("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ò–ì–†–ê–¶–ò–ò –°–¢–ê–¢–£–°–û–í:")
    logger.info(f"‚úì –£—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {success_count}")
    logger.info(f"‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã): {skip_count}")
    logger.info(f"‚úó –û—à–∏–±–æ–∫: {error_count}")
    logger.info("=" * 60)

    if error_count == 0:
        logger.info("üéâ –ú–ò–ì–†–ê–¶–ò–Ø –°–¢–ê–¢–£–°–û–í –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        logger.info("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å step3_issues_migration.py")
    else:
        logger.warning(f"‚ö† –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å {error_count} –æ—à–∏–±–∫–∞–º–∏")

if __name__ == "__main__":
    main()