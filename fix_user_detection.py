#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import re

def create_fixed_user_methods():
    """–°–æ–∑–¥–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    return '''    def create_user(self, user_data: Dict) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ YouTrack —á–µ—Ä–µ–∑ Hub API"""
        try:
            login = user_data.get('login', user_data.get('id'))
            email = user_data.get('email')
            display_name = user_data.get('display', login)
            
            logger.debug(f"    –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {login}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            yt_user = {
                'login': login,
                'name': display_name,
                'isActive': True
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º email –µ—Å–ª–∏ –µ—Å—Ç—å
            if email:
                yt_user['email'] = email
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            hub_url = f"{self.base_url}/hub/api/rest/users"
            
            response = self.session.post(
                hub_url,
                json=yt_user,
                params={'fields': 'id,login,name,email'}
            )
            
            if response.status_code in [200, 201]:
                created_user = response.json()
                logger.info(f"‚úì –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {login}")
                return created_user.get('id')
                
            elif response.status_code == 409:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –µ–≥–æ ID
                logger.debug(f"    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {login} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—â–µ–º ID...")
                existing_id = self.find_existing_user_id(login)
                if existing_id:
                    logger.info(f"‚è≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {login} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing_id})")
                    return existing_id
                else:
                    logger.warning(f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {login} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –µ–≥–æ ID")
                    return None
                    
            else:
                logger.error(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {login}: {response.status_code} - {response.text}")
                return None
                
        except requests.RequestException as e:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
    
    def find_existing_user_id(self, login: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π API
            response = self.session.get(
                f"{self.base_url}/api/users",
                params={
                    'query': login,
                    'fields': 'id,login',
                    '$top': 100
                }
            )
            
            if response.status_code == 200:
                users = response.json()
                for user in users:
                    if user.get('login') == login:
                        logger.debug(f"    –ù–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ API: {login} -> {user.get('id')}")
                        return user.get('id')
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ API, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ Hub API
            response = self.session.get(
                f"{self.base_url}/hub/api/rest/users",
                params={
                    'query': login,
                    'fields': 'id,login',
                    '$top': 100
                }
            )
            
            if response.status_code == 200:
                users = response.json()
                for user in users:
                    if user.get('login') == login:
                        logger.debug(f"    –ù–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ Hub API: {login} -> {user.get('id')}")
                        return user.get('id')
            
            logger.debug(f"    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {login} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ —á–µ—Ä–µ–∑ API, –Ω–∏ —á–µ—Ä–µ–∑ Hub API")
            return None
            
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {login}: {e}")
            return None
    
    def get_user_by_login(self, login: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return self.find_existing_user_id(login)'''

# –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
with open('step1_users_migration.py', 'r', encoding='utf-8') as f:
    content = f.read()

# –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥—ã create_user –∏ get_user_by_login
pattern1 = r'    def create_user\(self, user_data: Dict\) -> Optional\[str\]:.*?return None'
pattern2 = r'    def get_user_by_login\(self, login: str\) -> Optional\[str\]:.*?return None'

replacement = create_fixed_user_methods()

# –ó–∞–º–µ–Ω—è–µ–º –æ–±–∞ –º–µ—Ç–æ–¥–∞
content = re.sub(pattern1, '', content, flags=re.DOTALL)
content = re.sub(pattern2, '', content, flags=re.DOTALL)

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ—Å–ª–µ __init__
init_pattern = r'(\s+)(def __init__\(self.*?\n\s+)(\n\s+def)'
content = re.sub(init_pattern, r'\1\2' + replacement + r'\3', content, flags=re.DOTALL)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º
with open('step1_users_migration.py', 'w', encoding='utf-8') as f:
    f.write(content)

print("‚úÖ –ú–µ—Ç–æ–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
print("üîç –¢–µ–ø–µ—Ä—å —Å–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")