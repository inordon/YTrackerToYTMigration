#!/usr/bin/env python3
"""
–≠—Ç–∞–ø 3: –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –∏–∑ Yandex Tracker –≤ YouTrack
–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞–ø–ø–∏–Ω–≥
"""

import requests
import json
import time
import logging
from typing import Dict, List, Optional
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('step3_issues.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class YandexTrackerClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Yandex Tracker API"""

    def __init__(self, token: str, org_id: str):
        self.token = token
        self.org_id = org_id
        self.base_url = "https://api.tracker.yandex.net/v2"
        self.session = requests.Session()
        self.session.headers.update({
            'Authorization': f'OAuth {token}',
            'X-Org-ID': org_id,
            'Content-Type': 'application/json'
        })

    def get_issues(self, queue_key: str, per_page: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        all_issues = []
        page = 1

        while True:
            try:
                params = {
                    'queue': queue_key,
                    'perPage': per_page,
                    'page': page
                }
                response = self.session.get(f"{self.base_url}/issues", params=params)
                response.raise_for_status()
                issues = response.json()

                if not issues:
                    break

                all_issues.extend(issues)
                logger.debug(f"  –ü–æ–ª—É—á–µ–Ω–æ {len(issues)} –∑–∞–¥–∞—á —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}")
                page += 1

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(0.5)

            except requests.RequestException as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {queue_key}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: {e}")
                break

        logger.info(f"  üìù –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ {len(all_issues)} –∑–∞–¥–∞—á –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {queue_key}")
        return all_issues

    def get_issue_comments(self, issue_key: str) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –∑–∞–¥–∞—á–µ"""
        try:
            response = self.session.get(f"{self.base_url}/issues/{issue_key}/comments")
            response.raise_for_status()
            comments = response.json()
            logger.debug(f"    üí¨ –ü–æ–ª—É—á–µ–Ω–æ {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ {issue_key}")
            return comments
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ {issue_key}: {e}")
            return []

class YouTrackClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å YouTrack API"""

    def __init__(self, base_url: str, token: str):
        self.base_url = base_url.rstrip('/')
        self.token = token
        self.session = requests.Session()
        self.session.headers.update({
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        })

    def create_issue(self, issue_data: Dict, project_id: str) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ YouTrack"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            yt_issue = {
                'project': {'id': project_id},
                'summary': issue_data.get('summary'),
                'description': issue_data.get('description', ''),
            }

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –æ–ø–∏—Å–∞–Ω–∏–µ
            original_info = f"\n\n---\n**–ò—Å—Ö–æ–¥–Ω–∞—è –∑–∞–¥–∞—á–∞:** {issue_data.get('key')}\n"
            original_info += f"**–ê–≤—Ç–æ—Ä:** {issue_data.get('createdBy', {}).get('display', 'Unknown')}\n"
            original_info += f"**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {issue_data.get('createdAt', '')}\n"

            if issue_data.get('assignee'):
                original_info += f"**–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** {issue_data['assignee'].get('display', 'Unknown')}\n"

            yt_issue['description'] += original_info

            response = self.session.post(
                f"{self.base_url}/api/issues",
                json=yt_issue,
                params={'fields': 'id,idReadable'}
            )

            if response.status_code == 200:
                created_issue = response.json()
                logger.debug(f"    ‚úì –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: {created_issue.get('idReadable')}")
                return created_issue.get('id')
            else:
                logger.error(f"    ‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {response.status_code} - {response.text}")
                return None

        except requests.RequestException as e:
            logger.error(f"    ‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            return None

    def add_comment_to_issue(self, issue_id: str, comment_data: Dict) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–¥–∞—á–µ"""
        try:
            comment_text = comment_data.get('text', '')
            author = comment_data.get('createdBy', {})
            created_date = comment_data.get('createdAt', '')

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–≤—Ç–æ—Ä–µ
            formatted_comment = f"**–ê–≤—Ç–æ—Ä:** {author.get('display', 'Unknown')}\n"
            formatted_comment += f"**–î–∞—Ç–∞:** {created_date}\n\n"
            formatted_comment += comment_text

            response = self.session.post(
                f"{self.base_url}/api/issues/{issue_id}/comments",
                json={'text': formatted_comment},
                params={'fields': 'id'}
            )

            if response.status_code == 200:
                logger.debug(f"      üí¨ –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ")
                return True
            else:
                logger.warning(f"      ‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {response.status_code}")
                return False

        except requests.RequestException as e:
            logger.error(f"      ‚úó –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            return False

def load_config() -> Dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        with open('migration_config.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        logger.error("–§–∞–π–ª migration_config.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        exit(1)

def load_project_mapping() -> Dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    try:
        with open('project_mapping.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            return data.get('projects', {})
    except FileNotFoundError:
        logger.error("–§–∞–π–ª project_mapping.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        logger.error("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ step2_projects_migration.py")
        exit(1)

def save_issue_mapping(issue_mapping: Dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –∑–∞–¥–∞—á"""
    mapping_data = {
        'issues': issue_mapping,
        'timestamp': datetime.now().isoformat(),
        'step': 'issues_completed'
    }

    with open('issue_mapping.json', 'w', encoding='utf-8') as f:
        json.dump(mapping_data, f, ensure_ascii=False, indent=2)

    logger.info(f"–ú–∞–ø–ø–∏–Ω–≥ –∑–∞–¥–∞—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ issue_mapping.json")

def load_existing_issue_mapping() -> Dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞ –∑–∞–¥–∞—á"""
    try:
        with open('issue_mapping.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            return data.get('issues', {})
    except FileNotFoundError:
        return {}

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç—Ç–∞–ø–∞ 3"""
    logger.info("=" * 50)
    logger.info("–≠–¢–ê–ü 3: –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–î–ê–ß")
    logger.info("=" * 50)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–æ–≤
    project_mapping = load_project_mapping()
    if not project_mapping:
        logger.error("–ú–∞–ø–ø–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø—É—Å—Ç")
        logger.error("–°–Ω–∞—á–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç–µ step2_projects_migration.py")
        exit(1)

    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(project_mapping)} –ø—Ä–æ–µ–∫—Ç–æ–≤")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
    yandex_client = YandexTrackerClient(
        config['yandex_tracker']['token'],
        config['yandex_tracker']['org_id']
    )

    youtrack_client = YouTrackClient(
        config['youtrack']['url'],
        config['youtrack']['token']
    )

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞–ø–ø–∏–Ω–≥ –∑–∞–¥–∞—á
    issue_mapping = load_existing_issue_mapping()
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞–ø–ø–∏–Ω–≥ –∑–∞–¥–∞—á: {len(issue_mapping)} –∑–∞–¥–∞—á")

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
    migration_options = config.get('migration_options', {})
    migrate_comments = migration_options.get('migrate_comments', True)
    batch_size = migration_options.get('batch_size', 50)

    logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏={'–í–ö–õ' if migrate_comments else '–í–´–ö–õ'}, —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞={batch_size}")

    # –ú–∏–≥—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
    total_success = 0
    total_skip = 0
    total_error = 0
    total_issues_processed = 0

    for i, (queue_key, project_id) in enumerate(project_mapping.items(), 1):
        logger.info(f"[{i}/{len(project_mapping)}] üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç: {queue_key}")

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞
        yandex_issues = yandex_client.get_issues(queue_key, batch_size)
        if not yandex_issues:
            logger.warning(f"  ‚ö† –ù–µ—Ç –∑–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ {queue_key}")
            continue

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏
        project_success = 0
        project_skip = 0
        project_error = 0

        for j, issue in enumerate(yandex_issues, 1):
            issue_key = issue.get('key')
            total_issues_processed += 1

            if j % 10 == 0:
                logger.info(f"    [{j}/{len(yandex_issues)}] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ")

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞
            if issue_key in issue_mapping:
                project_skip += 1
                continue

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            issue_id = youtrack_client.create_issue(issue, project_id)
            if issue_id:
                issue_mapping[issue_key] = issue_id
                project_success += 1

                # –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                if migrate_comments:
                    comments = yandex_client.get_issue_comments(issue_key)
                    for comment in comments:
                        youtrack_client.add_comment_to_issue(issue_id, comment)
                        time.sleep(0.1)
            else:
                project_error += 1

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
            time.sleep(0.3)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∂–¥—ã–µ 50 –∑–∞–¥–∞—á
            if total_issues_processed % 50 == 0:
                save_issue_mapping(issue_mapping)
                logger.info(f"  üíæ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {total_issues_processed} –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É
        logger.info(f"  üìä –ü—Ä–æ–µ–∫—Ç {queue_key}: ‚úì{project_success} ‚è≠{project_skip} ‚úó{project_error}")

        total_success += project_success
        total_skip += project_skip
        total_error += project_error

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        save_issue_mapping(issue_mapping)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    save_issue_mapping(issue_mapping)

    # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    logger.info("=" * 50)
    logger.info("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –≠–¢–ê–ü–ê 3:")
    logger.info(f"‚úì –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {total_success}")
    logger.info(f"‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç): {total_skip}")
    logger.info(f"‚úó –û—à–∏–±–æ–∫: {total_error}")
    logger.info(f"üìä –í—Å–µ–≥–æ –≤ –º–∞–ø–ø–∏–Ω–≥–µ: {len(issue_mapping)}")
    logger.info(f"üî¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_issues_processed}")
    logger.info("=" * 50)

    if total_error == 0:
        logger.info("üéâ –≠–¢–ê–ü 3 –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        logger.info("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å step4_links_migration.py")
    else:
        logger.warning(f"‚ö† –≠—Ç–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω —Å {total_error} –æ—à–∏–±–∫–∞–º–∏")
        logger.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—É—Å–∫ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫")

if __name__ == "__main__":
    main()